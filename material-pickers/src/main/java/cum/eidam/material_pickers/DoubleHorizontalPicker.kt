package cum.eidam.material_pickers

import androidx.compose.foundation.gestures.Orientation
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.offset
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import cum.eidam.material_pickers.defaults.DoublePickerDefaults
import cum.eidam.material_pickers.style.DoublePickerStyle

/**
 * Two stacked horizontal pickers (top & bottom) sharing a coordinated [DoublePickerStyle].
 *
 * Each picker row scrolls horizontally and manages its own items and selection while visually
 * forming a unified control through complementary shapes generated by
 * [DoublePickerDefaults.style] (or a custom supplied [style]). Text offsets are mirrored via
 * [DoublePickerStyle.asSingle] so labels visually lean toward the inner seam providing balanced
 * composition.
 *
 * Typical use cases include selecting paired values such as date components, start/end markers,
 * or any dual related categorical choices laid out one above the other.
 *
 * @param TT Item type of the top picker.
 * @param TB Item type of the bottom picker.
 * @param itemsTop Items displayed in the top picker.
 * @param itemsBottom Items displayed in the bottom picker.
 * @param selectedIndexTop Currently selected index in the top picker.
 * @param selectedIndexBottom Currently selected index in the bottom picker.
 * @param onSelectedIndexChangeTop Callback fired when the top picker selection changes.
 * @param onSelectedIndexChangeBottom Callback fired when the bottom picker selection changes.
 * @param modifier Layout modifier for the surrounding Column.
 * @param style Double style providing paired shapes & shared colors (defaults to horizontal configuration).
 * @param itemsVisible Odd number of visible items per picker (applied to both pickers).
 */
@Composable
fun <TT, TB> DoubleHorizontalPicker(
    itemsTop: List<TT>,
    itemsBottom: List<TB>,
    selectedIndexTop: Int,
    selectedIndexBottom: Int,
    onSelectedIndexChangeTop: (Int) -> Unit,
    onSelectedIndexChangeBottom: (Int) -> Unit,
    modifier: Modifier = Modifier,

    style: DoublePickerStyle = DoublePickerDefaults.style(Orientation.Horizontal),

    itemsVisible: Int = DoublePickerDefaults.ITEMS_VISIBLE,
) {

    Column(
        modifier = modifier.fillMaxHeight()
    ) {


        HorizontalPicker(
            modifier = Modifier
                .weight(1f)
                .fillMaxWidth()
                .offset(y = (0.2).dp),
            items = itemsTop,
            selectedIndex = selectedIndexTop,
            onItemSelected = onSelectedIndexChangeTop,
            style = style.asSingle(DoublePickerStyle.Part.First),
            itemsVisible = itemsVisible,
        )

        HorizontalPicker(
            modifier = Modifier
                .weight(1f)
                .fillMaxWidth()
                .offset(y = (-0.2).dp),
            items = itemsBottom,
            selectedIndex = selectedIndexBottom,
            onItemSelected = onSelectedIndexChangeBottom,
            style = style.asSingle(DoublePickerStyle.Part.Second),
            itemsVisible = itemsVisible,
        )

    }

}